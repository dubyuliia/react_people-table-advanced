{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/PeopleFilters.tsx","components/SearchLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","PeopleFilters","useSearchParams","searchParams","setSearchParams","query","get","centuries","getAll","sex","search","type","placeholder","onChange","event","target","split","map","century","includes","filter","ch","length","SearchLink","children","params","props","PeopleTable","people","slug","useParams","currentSortField","isReversed","getSortParams","field","sort","order","person","name","born","died","mother","motherName","father","fatherName","PeoplePage","useState","loading","setLoading","errorMessage","setErrorMessage","setPeople","sortField","useEffect","getPeople","result","find","human","preparePeople","catch","finally","visiblePeople","Math","ceil","toLocaleLowerCase","trim","a","b","localeCompare","reverse","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.7f210e3d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || null;\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          to={{\n            search: getSearchWith(\n              searchParams, { sex: null },\n            ),\n          }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </Link>\n        <Link\n          to={{\n            search: getSearchWith(\n              searchParams, { sex: 'm' },\n            ),\n          }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </Link>\n        <Link\n          to={{\n            search: getSearchWith(\n              searchParams, { sex: 'f' },\n            ),\n          }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={event => setSearchParams(\n              getSearchWith(searchParams, {\n                query: event.target.value || null,\n              }),\n            )}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {'16,17,18,19,20'.split(',').map(century => (\n              <Link\n                key={century}\n                to={{\n                  search: getSearchWith(\n                    searchParams, {\n                      centuries: centuries.includes(century)\n                        ? centuries.filter(ch => century !== ch)\n                        : [...centuries, century],\n                    },\n                  ),\n                }}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames('button', 'is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n              to={{\n                search: getSearchWith(\n                  searchParams, {\n                    centuries: null,\n                  },\n                ),\n              }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            search: getSearchWith(\n              searchParams, {\n                sex: null, query: null, centuries: null,\n              },\n            ),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const currentSortField = searchParams.get('sort') || '';\n  const isReversed = searchParams.get('order') === 'desc';\n\n  const getSortParams = (field: string) => {\n    if (field === currentSortField && !isReversed) {\n      return { sort: field, order: 'desc' };\n    }\n\n    if (field === currentSortField && isReversed) {\n      return { sort: null, order: null };\n    }\n\n    return { sort: field, order: null };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"\n        table\n        is-striped\n        is-hoverable\n        is-narrow\n        is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            Name\n            <SearchLink\n              params={getSortParams('name')}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>\n            Sex\n            <SearchLink\n              params={getSortParams('sex')}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>\n            Born\n            <SearchLink\n              params={getSortParams('born')}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>\n            Died\n            <SearchLink\n              params={getSortParams('died')}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <Link\n                className={classNames({\n                  'has-text-danger': person.sex === 'f',\n                })}\n                to={`../${person.slug}`}\n              >\n                {person.name}\n              </Link>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother ? (\n                <Link\n                  className=\"has-text-danger\"\n                  to={`../${person.mother?.slug}`}\n                >\n                  {person.motherName}\n                </Link>\n              ) : (\n                person.motherName || '-'\n              )}\n            </td>\n            <td>\n              {person.father ? (\n                <Link to={`../${person.father?.slug}`}>\n                  {person.fatherName}\n                </Link>\n              ) : (\n                person.fatherName || '-'\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\n\nconst preparePeople = (people: Person[]) => {\n  return people.map(person => {\n    const mother = people.find(human => human.name === person.motherName);\n    const father = people.find(human => human.name === person.fatherName);\n\n    return ({\n      ...person,\n      mother,\n      father,\n    });\n  });\n};\n\nexport const PeoplePage: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n  const sortField = searchParams.get('sort');\n  const isReversed = searchParams.get('order') === 'desc';\n\n  useEffect(() => {\n    setLoading(true);\n\n    getPeople()\n      .then((result) => {\n        setPeople(preparePeople(result));\n      })\n      .catch(() => setErrorMessage(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  let visiblePeople = [...people];\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(\n      person => centuries.includes(\n        (Math.ceil(person.born / 100)).toString(),\n      ),\n    );\n  }\n\n  if (query) {\n    visiblePeople = visiblePeople.filter(\n      person => person\n        .name.toLocaleLowerCase().includes(query.toLocaleLowerCase().trim())\n        || person\n          .motherName?.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase().trim())\n          || person\n            .fatherName?.toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase().trim()),\n    );\n  }\n\n  if (sortField) {\n    visiblePeople.sort((a, b) => {\n      switch (sortField) {\n        case 'name':\n        case 'sex':\n          return a[sortField].localeCompare(b[sortField]);\n\n        case 'born':\n        case 'died':\n          return a[sortField] - b[sortField];\n\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visiblePeople.reverse();\n    }\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-flex-direction-row-reverse\">\n          {!loading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && (\n                <Loader />\n              )}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!loading && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!people.length && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Route,\n  HashRouter as Router,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<h1 className=\"title\">Home Page</h1>} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}