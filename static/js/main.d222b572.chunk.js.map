{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/PeopleFilters.tsx","components/SearchLink.tsx","types/SortField.ts","components/PeopleTable.tsx","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","FilterType","PeopleFilters","useSearchParams","searchParams","setSearchParams","query","get","centuries","getAll","sex","handleCenturyToggle","century","includes","filter","ch","search","Male","Female","type","placeholder","onChange","event","target","map","length","SearchLink","children","params","props","SortField","PeopleTable","people","slug","useParams","currentSortField","isReversed","getSortParams","field","sort","order","name","born","died","person","mother","motherName","father","fatherName","PeoplePage","useState","loading","setLoading","errorMessage","setErrorMessage","setPeople","sortField","useEffect","getPeople","result","find","human","preparePeople","catch","finally","visiblePeople","Math","ceil","toLocaleLowerCase","trim","a","b","localeCompare","reverse","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d222b572.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\n\nenum FilterType {\n  Female = 'f',\n  Male = 'm',\n}\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || null;\n  const centuriesArray = ['16', '17', '18', '19', '20'];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        query: event.target.value || null,\n      }),\n    );\n  }\n\n  function handleCenturyToggle(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(ch => century !== ch)\n      : [...centuries, century];\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          to={{\n            search: getSearchWith(\n              searchParams, { sex: null },\n            ),\n          }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </Link>\n        <Link\n          to={{\n            search: getSearchWith(\n              searchParams, { sex: FilterType.Male },\n            ),\n          }}\n          className={classNames({ 'is-active': sex === FilterType.Male })}\n        >\n          Male\n        </Link>\n        <Link\n          to={{\n            search: getSearchWith(\n              searchParams, { sex: FilterType.Female },\n            ),\n          }}\n          className={classNames({ 'is-active': sex === FilterType.Female })}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesArray.map(century => (\n              <Link\n                key={century}\n                to={{\n                  search: getSearchWith(\n                    searchParams,\n                    { centuries: handleCenturyToggle(century) },\n                  ),\n                }}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames('button', 'is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n              to={{\n                search: getSearchWith(\n                  searchParams, {\n                    centuries: null,\n                  },\n                ),\n              }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            search: getSearchWith(\n              searchParams, {\n                sex: null, query: null, centuries: null,\n              },\n            ),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SortField {\n  name = 'name',\n  sex = 'sex',\n  born = 'born',\n  died = 'died',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { SortField } from '../types/SortField';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const currentSortField = searchParams.get('sort') || '';\n  const isReversed = searchParams.get('order') === 'desc';\n\n  const getSortParams = (field: string) => {\n    if (field === currentSortField && !isReversed) {\n      return { sort: field, order: 'desc' };\n    }\n\n    if (field === currentSortField && isReversed) {\n      return { sort: null, order: null };\n    }\n\n    return { sort: field, order: null };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"\n        table\n        is-striped\n        is-hoverable\n        is-narrow\n        is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            Name\n            <SearchLink\n              params={getSortParams(SortField.name)}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>\n            Sex\n            <SearchLink\n              params={getSortParams(SortField.sex)}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>\n            Born\n            <SearchLink\n              params={getSortParams(SortField.born)}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>\n            Died\n            <SearchLink\n              params={getSortParams(SortField.died)}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-sort\" />\n              </span>\n            </SearchLink>\n          </th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <Link\n                className={classNames({\n                  'has-text-danger': person.sex === 'f',\n                })}\n                to={`../${person.slug}`}\n              >\n                {person.name}\n              </Link>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother ? (\n                <Link\n                  className=\"has-text-danger\"\n                  to={`../${person.mother?.slug}`}\n                >\n                  {person.motherName}\n                </Link>\n              ) : (\n                person.motherName || '-'\n              )}\n            </td>\n            <td>\n              {person.father ? (\n                <Link to={`../${person.father?.slug}`}>\n                  {person.fatherName}\n                </Link>\n              ) : (\n                person.fatherName || '-'\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\nimport { SortField } from '../types/SortField';\n\nconst preparePeople = (people: Person[]) => {\n  return people.map(person => {\n    const mother = people.find(human => human.name === person.motherName);\n    const father = people.find(human => human.name === person.fatherName);\n\n    return ({\n      ...person,\n      mother,\n      father,\n    });\n  });\n};\n\nexport const PeoplePage: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n  const sortField = searchParams.get('sort');\n  const isReversed = searchParams.get('order') === 'desc';\n\n  useEffect(() => {\n    setLoading(true);\n\n    getPeople()\n      .then((result) => {\n        setPeople(preparePeople(result));\n      })\n      .catch(() => setErrorMessage(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  let visiblePeople = [...people];\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(\n      person => centuries.includes(\n        (Math.ceil(person.born / 100)).toString(),\n      ),\n    );\n  }\n\n  if (query) {\n    visiblePeople = visiblePeople.filter(\n      person => person\n        .name.toLocaleLowerCase().includes(query.toLocaleLowerCase().trim())\n        || person\n          .motherName?.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase().trim())\n          || person\n            .fatherName?.toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase().trim()),\n    );\n  }\n\n  if (sortField) {\n    visiblePeople.sort((a, b) => {\n      switch (sortField) {\n        case SortField.name:\n        case SortField.sex:\n          return a[sortField].localeCompare(b[sortField]);\n\n        case SortField.born:\n        case SortField.died:\n          return a[sortField] - b[sortField];\n\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visiblePeople.reverse();\n    }\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-flex-direction-row-reverse\">\n          {!loading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && (\n                <Loader />\n              )}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!loading && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!people.length && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Route,\n  HashRouter as Router,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<h1 className=\"title\">Home Page</h1>} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}